{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tournament Cutter Process tetris tournament videos and cut them appropriately using FFmpeg. Github: github.com/whinee/tournament-cutter Website: tc.comms.whinyaan.xyz Commisioned by @tsdjed (Discord, jed#1111 ), Founder of Team TSD . Interested in commisioning projects? Inquire through Discord( whi_ne | whinyaan.xyz#5135 ) or through e-mail( whinyaan@pm.me ). Price starts at 15 USD. To be updated, be sure to watch this repository and join the Discord Support Server . For the terms of usage and legals, visit LICENSE and terms of usage & disclaimer . Downloads Since people are looking for the download first, here you go: Follow this link to install tc in your machine. Supported OSes Windows MacOS Linux Usage Before using this project, it is recommended to visit license and terms of usage & disclaimer for the terms of usage, disclaimer, and legals. tc -h Cutting: tc cut [ OPTIONS ] For programmatic use, visit the documentation: tc.comms.whinyaan.xyz/docs Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. Setup Follow this link to install ura in your machine. Contributions You can contribute by creating a new issue, or by creating pull requests. At the time of writing, there are no templates for both creating a new issue and pull requests. The developer notes however that the said template will be created if a trend of users using this project is evident. For creating a new issue, please make sure that the said issue is not on the list of closed and open issues. After checking that that is the case, create a new issue. The title of the issue must summarize its contents. The body must contain the following: a clear description of the bug Python version used for running and/or testing the project OS name and version Known Issues and Limitations At the time of writing, this project can not be run in Termux due to a fatal error. Also, something is broken and I don't know what is, 'cause I forgot! Future of this project The TODO will be done, except for that, nothing else. License MIT Copyright for portions of project tc are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , and by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL . All other copyright for project tc are held by [Github Account whinee Owner, 2022]. Check the license for more details. Credits Thank you To @tsdjed (Discord, jed#1111 ) for commisioning this project. MIT Logo Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons Icons Exclamation Mark , Code Fork , Star , Group , Code , and Discord icons by Icons8 NOTE: If a reference or source material is not attributed properly or not at all, please kindly message me at Discord: whi_ne | whinyaan.xyz#5135 or create a pull request so I can properly give credit to their respective authors.","title":"Home"},{"location":"#downloads","text":"Since people are looking for the download first, here you go: Follow this link to install tc in your machine.","title":"Downloads"},{"location":"#supported-oses","text":"Windows MacOS Linux","title":"Supported OSes"},{"location":"#usage","text":"Before using this project, it is recommended to visit license and terms of usage & disclaimer for the terms of usage, disclaimer, and legals. tc -h Cutting: tc cut [ OPTIONS ] For programmatic use, visit the documentation: tc.comms.whinyaan.xyz/docs","title":"Usage"},{"location":"#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.","title":"Getting Started"},{"location":"#setup","text":"Follow this link to install ura in your machine.","title":"Setup"},{"location":"#contributions","text":"You can contribute by creating a new issue, or by creating pull requests. At the time of writing, there are no templates for both creating a new issue and pull requests. The developer notes however that the said template will be created if a trend of users using this project is evident. For creating a new issue, please make sure that the said issue is not on the list of closed and open issues. After checking that that is the case, create a new issue. The title of the issue must summarize its contents. The body must contain the following: a clear description of the bug Python version used for running and/or testing the project OS name and version","title":"Contributions"},{"location":"#known-issues-and-limitations","text":"At the time of writing, this project can not be run in Termux due to a fatal error. Also, something is broken and I don't know what is, 'cause I forgot!","title":"Known Issues and Limitations"},{"location":"#future-of-this-project","text":"The TODO will be done, except for that, nothing else.","title":"Future of this project"},{"location":"#license","text":"","title":"License"},{"location":"#mit","text":"Copyright for portions of project tc are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , and by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL . All other copyright for project tc are held by [Github Account whinee Owner, 2022]. Check the license for more details.","title":"MIT"},{"location":"#credits","text":"","title":"Credits"},{"location":"#thank-you","text":"To @tsdjed (Discord, jed#1111 ) for commisioning this project.","title":"Thank you"},{"location":"#mit-logo","text":"Massachusetts Institute of Technology (vectorized by Mysid , modified by whinee ), Public domain, via Wikimedia Commons","title":"MIT Logo"},{"location":"#icons","text":"Exclamation Mark , Code Fork , Star , Group , Code , and Discord icons by Icons8 NOTE: If a reference or source material is not attributed properly or not at all, please kindly message me at Discord: whi_ne | whinyaan.xyz#5135 or create a pull request so I can properly give credit to their respective authors.","title":"Icons"},{"location":"changelog/","text":"Changelog 0.0.0.0-alpha.1 Changed Windows' CFLOP[0] from .\\ura.yml to .\\tc.yml Removed Thumbnail template 0.0.0.0-alpha.0 Initial release of the application","title":"Changelog"},{"location":"license/","text":"MIT LICENSE Copyright for portions of project tc are held by [whi_ne, Github account whinee owner, 2022] as part of project hyaku , by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL , and by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL . All other copyright for project tc are held by [Github Account whinee Owner, 2022]. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"notes%20to%20self/","text":"Notes to Self Look, whi_ne, I have written this for you. Please, do I humbly plead you, do not ever forgot to read this before pushing changes to Github. There is also a professional version of this notes here . Versioning System Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org . Version Bump Guides ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0 Changelog As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app. Documentation The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Notes to self"},{"location":"notes%20to%20self/#versioning-system","text":"Look, you have made your own versioning system based off semver 2.0.0. Use it properly. Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. If in doubt, please DO visit semver.org .","title":"Versioning System"},{"location":"notes%20to%20self/#version-bump-guides","text":"ANY change in the user interface/experience SHALL induce a user version bump. ANY change in the schema shall induce a dev version bump. ANY change in the documentation SHALL NOT induce any version bump. flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0","title":"Version Bump Guides"},{"location":"notes%20to%20self/#changelog","text":"As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Mind the human as you do with the robot. Format the changelog properly. Example format: ## 69.4.2.0 (minor bump) Sprinkle a description here. ### Added - I added a cool feature. ### Deprecated - This feature will be depracated 'cuz I can't maintain it anymore. ### Security - Fixed stuff where the anilist token is leaked to everyone using this app.","title":"Changelog"},{"location":"notes%20to%20self/#documentation","text":"The documentation system is a custom solution. If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself. Do not blame the shitty generator you wrote. You might just have written a faulty code.","title":"Documentation"},{"location":"notes/","text":"Notes There is a more personal version of this notes here . Versioning System Hyaku uses modified semver. This is due to the fact that I believe that I, the developer of this app, introduces too much breaking change to the API without noticeable changes to the user interface and/or experience. And such, I have decided to use the following versioning system: Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. Anything else adheres to the semantic versioning 2.0.0. If in doubt, please do not hesitate to visit semver.org . flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0 Changelog As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Example format: ## 1.0.0.0-rc.1 (pre-release identifier bump) Concisely describe changes in this release. ### Added - List additions here. Documentation The documentation system is a custom solution. Documenting it will be futile, as it is ever-changing, tuned to the developer's needs.","title":"Notes"},{"location":"notes/#versioning-system","text":"Hyaku uses modified semver. This is due to the fact that I believe that I, the developer of this app, introduces too much breaking change to the API without noticeable changes to the user interface and/or experience. And such, I have decided to use the following versioning system: Given a version number user.dev.minor.patch , increment the: user version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella. dev version when you make incompatible API changes, minor version when you add functionality in a backwards compatible manner, and patch version when you make backwards compatible bug fixes. Anything else adheres to the semantic versioning 2.0.0. If in doubt, please do not hesitate to visit semver.org . flowchart TD VB([Version Bump]) VB --> |\"prerelease identifier (pi)\"| e_pr{existing `pi`} e_pr --> |none| bprv(\"bump prerelease version (pv)\") bprv --> ba(bump `pi` to `alpha`) ba --> bp([bump `patch`]) e_pr --> |alpha| bb(bump to `beta`) bb --> r0([reset version/s below it to `0` or `none`]) e_pr --> |beta| br(bump to `rc`) --> r0 e_pr --> |rc| rn(reset to `none`) --> r0 VB --> |others| bsv(bump specified version) --> r0","title":"Versioning System"},{"location":"notes/#changelog","text":"As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise: Added for new features. user dev minor Changed for changes in existing functionality. user dev Deprecated for soon-to-be removed features. patch Removed for now removed features. user dev Fixed for any bug fixes. Security in case of vulnerabilities. Example format: ## 1.0.0.0-rc.1 (pre-release identifier bump) Concisely describe changes in this release. ### Added - List additions here.","title":"Changelog"},{"location":"notes/#documentation","text":"The documentation system is a custom solution. Documenting it will be futile, as it is ever-changing, tuned to the developer's needs.","title":"Documentation"},{"location":"docs/0/0/","text":"raw_docs/docs/0/0 \"config\"","title":"Index"},{"location":"docs/0/0/config/","text":"Configurations Config File Config File Lookup Order of Precedence (CFLOP) Hyaku is a cross-compatible project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for Hyaku's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./tc.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/tc/videos.yml\"] --> F D --> |false| F[\"~/.config/tc/videos.yml\"] F --> G[\"~/.tc\"] G --> H[\"/etc/xdg/tc/videos.yml\"] H --> I[\"/etc/tc/videos.yml\"] end B --> |Windows| J[.\\tc.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\Hyaku\\<br>videos.yml\"] end","title":"Config"},{"location":"docs/0/0/config/#config-file","text":"","title":"Config File"},{"location":"docs/0/0/config/#config-file-lookup-order-of-precedence-cflop","text":"Hyaku is a cross-compatible project, which means that it could be ran in different OS. There is however a lack of unity in the standardization on the location of config files in this OSes. And such, I have devised a precedence order for Hyaku's config file in different platforms. The following are the CFLOP for different OSes: flowchart TD A([CFLOP]) --> L[--config argument] L --> B{OS?} B --> |*nix| C[./tc.yml] subgraph <br> C --> D{\"XDG<br>CONFIG<br>HOME<br>(XCH)?\"} D --> |true| E[\"${XCH}/tc/videos.yml\"] --> F D --> |false| F[\"~/.config/tc/videos.yml\"] F --> G[\"~/.tc\"] G --> H[\"/etc/xdg/tc/videos.yml\"] H --> I[\"/etc/tc/videos.yml\"] end B --> |Windows| J[.\\tc.yml] subgraph <br><br> J --> K[\"${boot drive}:\\\\<br>Users\\${username}\\<br>AppData\\Roaming\\Hyaku\\<br>videos.yml\"] end","title":"Config File Lookup Order of Precedence (CFLOP)"},{"location":"docs/0/0/setup/","text":"Setup flowchart LR A([Config]) --> B[Grab CFLOP] B --> C{Last item} C --> |false| D{File exists?} D --> |true| E([Read config file]) D --> |false| C C --> |true| F{OS?} F --> |Windows| G[Initialize config file<br>at first lookup path] --> E F --> |*nix| H{.AppImage?} H --> |true| I[Initialize config file<br>at second lookup path] --> E H --> |false| G","title":"Setup"},{"location":"docs/0/0/api/","text":"tc Sub-modules tc.cli tc.globals tc.init tc.main tc.settings tc.style tc.utils","title":"tc"},{"location":"docs/0/0/api/#tc","text":"","title":"tc"},{"location":"docs/0/0/api/#sub-modules","text":"tc.cli tc.globals tc.init tc.main tc.settings tc.style tc.utils","title":"Sub-modules"},{"location":"docs/0/0/api/cli/","text":"Module tc.cli Functions cao(group: <function group at 0x7fce30cf4550>, cmd: str) \u2011> List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]] : Retruns wrappers for a click command evaluated from the given arguments. Args: group (click.group): Command group of the command to be under. cmd (str): Name of the command. Returns: List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]]: The wrappers. command(group: <function group at 0x7fce30cf4550>) \u2011> Callable[[Callable[[Any], Any]], Callable[[Any], Any]] : Wrapper for click commands. Args: group (click.group): Command group of the command to be under. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]] fn_log(lvl: int) :","title":"Cli"},{"location":"docs/0/0/api/cli/#module-tccli","text":"","title":"Module tc.cli"},{"location":"docs/0/0/api/cli/#functions","text":"cao(group: <function group at 0x7fce30cf4550>, cmd: str) \u2011> List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]] : Retruns wrappers for a click command evaluated from the given arguments. Args: group (click.group): Command group of the command to be under. cmd (str): Name of the command. Returns: List[Callable[[Callable[[Any], Any]], Callable[[Any], Any]]]: The wrappers. command(group: <function group at 0x7fce30cf4550>) \u2011> Callable[[Callable[[Any], Any]], Callable[[Any], Any]] : Wrapper for click commands. Args: group (click.group): Command group of the command to be under. Returns: Callable[[Callable[[Any], Any]], Callable[[Any], Any]] fn_log(lvl: int) :","title":"Functions"},{"location":"docs/0/0/api/globals/","text":"Module tc.globals","title":"Globals"},{"location":"docs/0/0/api/globals/#module-tcglobals","text":"","title":"Module tc.globals"},{"location":"docs/0/0/api/init/","text":"Module tc.init Functions init(idx: int) \u2011> None :","title":"Init"},{"location":"docs/0/0/api/init/#module-tcinit","text":"","title":"Module tc.init"},{"location":"docs/0/0/api/init/#functions","text":"init(idx: int) \u2011> None :","title":"Functions"},{"location":"docs/0/0/api/main/","text":"Module tc.main Functions main(config: str, directory: str, **kwargs: dict[str, typing.Any]) :","title":"Main"},{"location":"docs/0/0/api/main/#module-tcmain","text":"","title":"Module tc.main"},{"location":"docs/0/0/api/main/#functions","text":"main(config: str, directory: str, **kwargs: dict[str, typing.Any]) :","title":"Functions"},{"location":"docs/0/0/api/settings/","text":"Module tc.settings Functions cfg(*args, **kwargs) \u2011> Any : cfg_path() \u2011> str : readcfg(file: str) \u2011> Any : Read the contents of a file with the given file name. Args: file (str): File name of the file to read the contents of. Returns: Any: The contents of the file. stg(stg: str, file: str = '/home/whine/whi_ne/1/coding/projects/tools/custom ffmpeg cutter/tc/stg.json') \u2011> Any : Retrieve dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} stg(\"data/attr/ch\", \"settings.json\") will return 1 Args: stg (str): Directory of the value to be retrieved. file (str, optional): File name of the file to get the value from. Defaults to `path.join(dn(ap(__file__)), \"settings.json\")`. Returns: Any: The retrieved value. wr_stg(stg: str, value: Any, file: str = '/home/whine/whi_ne/1/coding/projects/tools/custom ffmpeg cutter/tc/stg.json') \u2011> None : Rewrite dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} wr_stg(\"data/attr/ch\", 2) will rewrite settings.json to be: {\"data\": {\"attr\": {\"ch\": 2}}} Args: stg (str): Directory of the value to be rewrited. value (Any): Value to rewrite to. file (str, optional): File name of the file to rewrite the value from. Defaults to path.join(dn(ap(__file__)), \"settings.json\"). Raises: FileNotFoundError: Raised if the file is not found.","title":"Settings"},{"location":"docs/0/0/api/settings/#module-tcsettings","text":"","title":"Module tc.settings"},{"location":"docs/0/0/api/settings/#functions","text":"cfg(*args, **kwargs) \u2011> Any : cfg_path() \u2011> str : readcfg(file: str) \u2011> Any : Read the contents of a file with the given file name. Args: file (str): File name of the file to read the contents of. Returns: Any: The contents of the file. stg(stg: str, file: str = '/home/whine/whi_ne/1/coding/projects/tools/custom ffmpeg cutter/tc/stg.json') \u2011> Any : Retrieve dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} stg(\"data/attr/ch\", \"settings.json\") will return 1 Args: stg (str): Directory of the value to be retrieved. file (str, optional): File name of the file to get the value from. Defaults to `path.join(dn(ap(__file__)), \"settings.json\")`. Returns: Any: The retrieved value. wr_stg(stg: str, value: Any, file: str = '/home/whine/whi_ne/1/coding/projects/tools/custom ffmpeg cutter/tc/stg.json') \u2011> None : Rewrite dictionary value of the config file with the given file name using recursive indexing with a string. ex.: Given that settings.json contains: {\"data\": {\"attr\": {\"ch\": 1}}} wr_stg(\"data/attr/ch\", 2) will rewrite settings.json to be: {\"data\": {\"attr\": {\"ch\": 2}}} Args: stg (str): Directory of the value to be rewrited. value (Any): Value to rewrite to. file (str, optional): File name of the file to rewrite the value from. Defaults to path.join(dn(ap(__file__)), \"settings.json\"). Raises: FileNotFoundError: Raised if the file is not found.","title":"Functions"},{"location":"docs/0/0/api/style/","text":"Module tc.style Functions pp(t: Any) : Classes C() : ### Class variables `h0` : `h1` : `h2` : `s0` : `s1` : `s2` : S() : ### Class variables `p0` : `p1` : `t0` : `t1` : `t2` : `t_critical` : `t_error` : `t_warning` : ct() : ### Methods `group(*ls: list[typing.Any]) \u2011> rich.console.Group` : `table(cols: list[str], rows: list[list[str]])` :","title":"Style"},{"location":"docs/0/0/api/style/#module-tcstyle","text":"","title":"Module tc.style"},{"location":"docs/0/0/api/style/#functions","text":"pp(t: Any) :","title":"Functions"},{"location":"docs/0/0/api/style/#classes","text":"C() : ### Class variables `h0` : `h1` : `h2` : `s0` : `s1` : `s2` : S() : ### Class variables `p0` : `p1` : `t0` : `t1` : `t2` : `t_critical` : `t_error` : `t_warning` : ct() : ### Methods `group(*ls: list[typing.Any]) \u2011> rich.console.Group` : `table(cols: list[str], rows: list[list[str]])` :","title":"Classes"},{"location":"docs/0/0/api/utils/","text":"Module tc.utils Functions dd(default: dict[typing.Any, typing.Any], d: dict[typing.Any, typing.Any] | None) \u2011> dict[typing.Any, typing.Any] : Defaults dictionary. Overwrite the items in the default dict with the items in the d dict. Args: default (Dict[Any, Any]): The dict to rewrite the items to. d (Union[Dict[Any, Any], None]): The dict to rewrite the items from. Returns: dict[Any, Any] ddir(d: dict[typing.Any, typing.Any], dir: str, de: Any = {}) \u2011> Any : Retrieve dictionary value using recursive indexing with a string. ex.: ddir({\"data\": {\"attr\": {\"ch\": 1}}}, \"data/attr/ch\") will return 1 Args: dict (dict): Dictionary to retrieve the value from. dir (str): Directory of the value to be retrieved. Returns: op (Any): Retrieved value. de(a: Any, d: Any) \u2011> Any : Defaults. Return a if a is True, else returns d. Args: a (Any): Object to be tested, will be returned if evaluates to True. d (Any): Default object to be returned if `a` evaluates to False. Returns: Any dnrp(file: str, n: int = 1) \u2011> str : Get the directory component of a pathname by n times recursively then return it. Args: file (str): File to get the directory of. n (int, optional): Number of times to get up the directory???? Defaults to 1. Returns: op (str): The directory component got recursively by n times from the given pathname dpop(d: dict[typing.Any, typing.Any], pop: list[int | tuple[str | int | tuple] | str], de: Any = None) \u2011> Any : Iterate through the preferred order of precedence ( pop ) and see if the value exists in the dictionary. If it does, return it. If not, return de . Args: d (Dict[Any, Any]): Dictionary to retrieve the value from. pop (list[int | tuple[str | int | tuple] | str]): List of keys to iterate through. de (Any, optional): Default object to be returned. Defaults to None. Returns: Any: Retrieved value. inmd(p: str, ls: list[str] = None) : \"If Not path.isdir , Make Directories\" Args: p (str): [description] le(expr: str) \u2011> Any : run(s: str, cwd: str = '/home/whine/whi_ne/1/coding/projects/tools/custom ffmpeg cutter') : sanitize_text(s: str) :","title":"Utils"},{"location":"docs/0/0/api/utils/#module-tcutils","text":"","title":"Module tc.utils"},{"location":"docs/0/0/api/utils/#functions","text":"dd(default: dict[typing.Any, typing.Any], d: dict[typing.Any, typing.Any] | None) \u2011> dict[typing.Any, typing.Any] : Defaults dictionary. Overwrite the items in the default dict with the items in the d dict. Args: default (Dict[Any, Any]): The dict to rewrite the items to. d (Union[Dict[Any, Any], None]): The dict to rewrite the items from. Returns: dict[Any, Any] ddir(d: dict[typing.Any, typing.Any], dir: str, de: Any = {}) \u2011> Any : Retrieve dictionary value using recursive indexing with a string. ex.: ddir({\"data\": {\"attr\": {\"ch\": 1}}}, \"data/attr/ch\") will return 1 Args: dict (dict): Dictionary to retrieve the value from. dir (str): Directory of the value to be retrieved. Returns: op (Any): Retrieved value. de(a: Any, d: Any) \u2011> Any : Defaults. Return a if a is True, else returns d. Args: a (Any): Object to be tested, will be returned if evaluates to True. d (Any): Default object to be returned if `a` evaluates to False. Returns: Any dnrp(file: str, n: int = 1) \u2011> str : Get the directory component of a pathname by n times recursively then return it. Args: file (str): File to get the directory of. n (int, optional): Number of times to get up the directory???? Defaults to 1. Returns: op (str): The directory component got recursively by n times from the given pathname dpop(d: dict[typing.Any, typing.Any], pop: list[int | tuple[str | int | tuple] | str], de: Any = None) \u2011> Any : Iterate through the preferred order of precedence ( pop ) and see if the value exists in the dictionary. If it does, return it. If not, return de . Args: d (Dict[Any, Any]): Dictionary to retrieve the value from. pop (list[int | tuple[str | int | tuple] | str]): List of keys to iterate through. de (Any, optional): Default object to be returned. Defaults to None. Returns: Any: Retrieved value. inmd(p: str, ls: list[str] = None) : \"If Not path.isdir , Make Directories\" Args: p (str): [description] le(expr: str) \u2011> Any : run(s: str, cwd: str = '/home/whine/whi_ne/1/coding/projects/tools/custom ffmpeg cutter') : sanitize_text(s: str) :","title":"Functions"}]}