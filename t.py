import re

regex = r"(?<=# nav inst start\n).*(?=# nav inst end)"

test_str = ("site_name: Tournament cutter\n"
	"site_url: https://tc.comms.whinyaan.xyz\n"
	"repo_url: https://github.com/whinee/tournament-cutter\n"
	"site_description: |-\n"
	"  Process tetris tournament videos\n"
	"site_author: whi~nyaan!\n"
	"copyright: Copyright &copy; 2022 whitespace_negative\n\n"
	"theme:\n"
	"  name: material\n"
	"  locale: en\n"
	"  include_search_page: false\n"
	"  search_index_only: true\n"
	"  language: en\n"
	"  favicon: assets/favicon.png\n"
	"  logo: images/icons/logo.svg\n\n"
	"  font:\n"
	"    text: Roboto\n"
	"    code: Roboto Mono\n\n"
	"  static_templates:\n"
	"    - 404.html\n\n"
	"  features:\n"
	"    - navigation.instant\n"
	"    - navigation.tracking\n"
	"    - navigation.tabs\n"
	"    - navigation.sections\n"
	"    - navigation.indexes\n\n"
	"  palette:\n"
	"    -\n"
	"      scheme: slate\n"
	"      primary: deep purple\n"
	"      accent: deep purple\n"
	"      toggle:\n"
	"        icon: material/toggle-switch\n"
	"        name: Switch to light mode\n"
	"    -\n"
	"      scheme: default\n"
	"      primary: deep purple\n"
	"      accent: deep purple\n"
	"      toggle:\n"
	"        icon: material/toggle-switch-off-outline\n"
	"        name: Switch to dark mode\n\n"
	"markdown_extensions:\n"
	"  -\n"
	"    pymdownx.superfences:\n"
	"      custom_fences:\n"
	"        -\n"
	"          name: mermaid\n"
	"          class: mermaid\n"
	"          format: !!python/name:pymdownx.superfences.fence_code_format\n\n"
	"extra:\n"
	"  social:\n"
	"    -\n"
	"      icon: fontawesome/brands/github\n"
	"      link: https://github.com/hyaku-dl/urasunday\n"
	"    -\n"
	"      icon: fontawesome/brands/python\n"
	"      link: https://pypi.org/project/ura/\n"
	"    -\n"
	"      icon: fontawesome/brands/twitter\n"
	"      link: https://twitter.com/whi_nyaan\n\n"
	"plugins:\n"
	"  - search\n"
	"  - minify:\n"
	"      minify_html: true\n"
	"      minify_css: true\n"
	"      minify_js: true\n\n"
	"nav:\n"
	"  - Home: /\n\n"
	"  # Do Not Modify!\n"
	"  - Installation:\n"
	"  # nav inst start\n"
	"    - Index: docs/0/0/installation/\n"
	"    - Installable:\n"
	"      - Index: docs/0/0/installation/installable\n"
	"      - Windows: docs/0/0/installation/installable/windows\n"
	"      - Linux:\n"
	"        - Index: docs/0/0/installation/installable/linux/\n"
	"        - Arch: docs/0/0/installation/portable/linux/arch/\n"
	"        - Debian: docs/0/0/installation/portable/linux/debian/\n"
	"    - Portable:\n"
	"      - Index: docs/0/0/installation/portable\n"
	"      - Windows: docs/0/0/installation/portable/windows\n"
	"      - Linux:\n"
	"        - Index: docs/0/0/installation/portable/linux/\n"
	"        - Arch: docs/0/0/installation/portable/linux/arch/\n"
	"        - Debian: docs/0/0/installation/portable/linux/debian/\n"
	"    - Programmatic:\n"
	"      - Index: docs/0/0/installation/programmatic\n"
	"      - Windows: docs/0/0/installation/programmatic/windows\n"
	"      - MacOS: docs/0/0/installation/programmatic/macos\n"
	"      - Linux:\n"
	"        - Index: docs/0/0/installation/programmatic/linux/\n"
	"        - Arch: docs/0/0/installation/programmatic/linux/arch/\n"
	"        - Debian: docs/0/0/installation/programmatic/linux/debian/\n"
	"  # nav inst end\n\n"
	"  - License agreement: /license\n"
	"  - Changelog: /changelog\n"
	"  - Notes:\n"
	"    - Notes: /notes\n"
	"    - Notes to self: /notes to self\n\n"
	"  # Do Not Modify!\n"
	"  - Documentation:\n"
	"  # nav docs start\n"
	"  -\n"
	"  # nav docs end")

matches = re.search(regex, test_str, re.DOTALL)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))